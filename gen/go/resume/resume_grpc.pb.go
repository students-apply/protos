// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: resume/resume.proto

package resume

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ResumeService_CreateResume_FullMethodName   = "/resume.ResumeService/CreateResume"
	ResumeService_UpdateResume_FullMethodName   = "/resume.ResumeService/UpdateResume"
	ResumeService_GetResumeByID_FullMethodName  = "/resume.ResumeService/GetResumeByID"
	ResumeService_GetUserResumes_FullMethodName = "/resume.ResumeService/GetUserResumes"
	ResumeService_DeleteResume_FullMethodName   = "/resume.ResumeService/DeleteResume"
)

// ResumeServiceClient is the client API for ResumeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResumeServiceClient interface {
	CreateResume(ctx context.Context, in *CreateResumeRequest, opts ...grpc.CallOption) (*CreateResumeResponse, error)
	UpdateResume(ctx context.Context, in *UpdateResumeRequest, opts ...grpc.CallOption) (*UpdateResumeResponse, error)
	GetResumeByID(ctx context.Context, in *GetResumeByIDRequest, opts ...grpc.CallOption) (*GetResumeByIDResponse, error)
	GetUserResumes(ctx context.Context, in *GetUserResumesRequest, opts ...grpc.CallOption) (*GetUserResumesResponse, error)
	DeleteResume(ctx context.Context, in *DeleteResumeRequest, opts ...grpc.CallOption) (*DeleteResumeResponse, error)
}

type resumeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResumeServiceClient(cc grpc.ClientConnInterface) ResumeServiceClient {
	return &resumeServiceClient{cc}
}

func (c *resumeServiceClient) CreateResume(ctx context.Context, in *CreateResumeRequest, opts ...grpc.CallOption) (*CreateResumeResponse, error) {
	out := new(CreateResumeResponse)
	err := c.cc.Invoke(ctx, ResumeService_CreateResume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) UpdateResume(ctx context.Context, in *UpdateResumeRequest, opts ...grpc.CallOption) (*UpdateResumeResponse, error) {
	out := new(UpdateResumeResponse)
	err := c.cc.Invoke(ctx, ResumeService_UpdateResume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) GetResumeByID(ctx context.Context, in *GetResumeByIDRequest, opts ...grpc.CallOption) (*GetResumeByIDResponse, error) {
	out := new(GetResumeByIDResponse)
	err := c.cc.Invoke(ctx, ResumeService_GetResumeByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) GetUserResumes(ctx context.Context, in *GetUserResumesRequest, opts ...grpc.CallOption) (*GetUserResumesResponse, error) {
	out := new(GetUserResumesResponse)
	err := c.cc.Invoke(ctx, ResumeService_GetUserResumes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *resumeServiceClient) DeleteResume(ctx context.Context, in *DeleteResumeRequest, opts ...grpc.CallOption) (*DeleteResumeResponse, error) {
	out := new(DeleteResumeResponse)
	err := c.cc.Invoke(ctx, ResumeService_DeleteResume_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResumeServiceServer is the server API for ResumeService service.
// All implementations must embed UnimplementedResumeServiceServer
// for forward compatibility
type ResumeServiceServer interface {
	CreateResume(context.Context, *CreateResumeRequest) (*CreateResumeResponse, error)
	UpdateResume(context.Context, *UpdateResumeRequest) (*UpdateResumeResponse, error)
	GetResumeByID(context.Context, *GetResumeByIDRequest) (*GetResumeByIDResponse, error)
	GetUserResumes(context.Context, *GetUserResumesRequest) (*GetUserResumesResponse, error)
	DeleteResume(context.Context, *DeleteResumeRequest) (*DeleteResumeResponse, error)
	mustEmbedUnimplementedResumeServiceServer()
}

// UnimplementedResumeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedResumeServiceServer struct {
}

func (UnimplementedResumeServiceServer) CreateResume(context.Context, *CreateResumeRequest) (*CreateResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateResume not implemented")
}
func (UnimplementedResumeServiceServer) UpdateResume(context.Context, *UpdateResumeRequest) (*UpdateResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResume not implemented")
}
func (UnimplementedResumeServiceServer) GetResumeByID(context.Context, *GetResumeByIDRequest) (*GetResumeByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResumeByID not implemented")
}
func (UnimplementedResumeServiceServer) GetUserResumes(context.Context, *GetUserResumesRequest) (*GetUserResumesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserResumes not implemented")
}
func (UnimplementedResumeServiceServer) DeleteResume(context.Context, *DeleteResumeRequest) (*DeleteResumeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResume not implemented")
}
func (UnimplementedResumeServiceServer) mustEmbedUnimplementedResumeServiceServer() {}

// UnsafeResumeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResumeServiceServer will
// result in compilation errors.
type UnsafeResumeServiceServer interface {
	mustEmbedUnimplementedResumeServiceServer()
}

func RegisterResumeServiceServer(s grpc.ServiceRegistrar, srv ResumeServiceServer) {
	s.RegisterService(&ResumeService_ServiceDesc, srv)
}

func _ResumeService_CreateResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).CreateResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_CreateResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).CreateResume(ctx, req.(*CreateResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_UpdateResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).UpdateResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_UpdateResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).UpdateResume(ctx, req.(*UpdateResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_GetResumeByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResumeByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).GetResumeByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_GetResumeByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).GetResumeByID(ctx, req.(*GetResumeByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_GetUserResumes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserResumesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).GetUserResumes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_GetUserResumes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).GetUserResumes(ctx, req.(*GetUserResumesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ResumeService_DeleteResume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteResumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResumeServiceServer).DeleteResume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ResumeService_DeleteResume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResumeServiceServer).DeleteResume(ctx, req.(*DeleteResumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ResumeService_ServiceDesc is the grpc.ServiceDesc for ResumeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ResumeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resume.ResumeService",
	HandlerType: (*ResumeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateResume",
			Handler:    _ResumeService_CreateResume_Handler,
		},
		{
			MethodName: "UpdateResume",
			Handler:    _ResumeService_UpdateResume_Handler,
		},
		{
			MethodName: "GetResumeByID",
			Handler:    _ResumeService_GetResumeByID_Handler,
		},
		{
			MethodName: "GetUserResumes",
			Handler:    _ResumeService_GetUserResumes_Handler,
		},
		{
			MethodName: "DeleteResume",
			Handler:    _ResumeService_DeleteResume_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resume/resume.proto",
}

const (
	ExperienceService_CreateExperience_FullMethodName = "/resume.ExperienceService/CreateExperience"
	ExperienceService_UpdateExperience_FullMethodName = "/resume.ExperienceService/UpdateExperience"
	ExperienceService_GetExperience_FullMethodName    = "/resume.ExperienceService/GetExperience"
	ExperienceService_DeleteExperience_FullMethodName = "/resume.ExperienceService/DeleteExperience"
)

// ExperienceServiceClient is the client API for ExperienceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExperienceServiceClient interface {
	CreateExperience(ctx context.Context, in *CreateExperienceRequest, opts ...grpc.CallOption) (*CreateExperienceResponse, error)
	UpdateExperience(ctx context.Context, in *UpdateExperienceRequest, opts ...grpc.CallOption) (*Experience, error)
	GetExperience(ctx context.Context, in *GetExperienceRequest, opts ...grpc.CallOption) (*Experience, error)
	DeleteExperience(ctx context.Context, in *DeleteExperienceRequest, opts ...grpc.CallOption) (*DeleteExperienceResponse, error)
}

type experienceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExperienceServiceClient(cc grpc.ClientConnInterface) ExperienceServiceClient {
	return &experienceServiceClient{cc}
}

func (c *experienceServiceClient) CreateExperience(ctx context.Context, in *CreateExperienceRequest, opts ...grpc.CallOption) (*CreateExperienceResponse, error) {
	out := new(CreateExperienceResponse)
	err := c.cc.Invoke(ctx, ExperienceService_CreateExperience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experienceServiceClient) UpdateExperience(ctx context.Context, in *UpdateExperienceRequest, opts ...grpc.CallOption) (*Experience, error) {
	out := new(Experience)
	err := c.cc.Invoke(ctx, ExperienceService_UpdateExperience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experienceServiceClient) GetExperience(ctx context.Context, in *GetExperienceRequest, opts ...grpc.CallOption) (*Experience, error) {
	out := new(Experience)
	err := c.cc.Invoke(ctx, ExperienceService_GetExperience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *experienceServiceClient) DeleteExperience(ctx context.Context, in *DeleteExperienceRequest, opts ...grpc.CallOption) (*DeleteExperienceResponse, error) {
	out := new(DeleteExperienceResponse)
	err := c.cc.Invoke(ctx, ExperienceService_DeleteExperience_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExperienceServiceServer is the server API for ExperienceService service.
// All implementations must embed UnimplementedExperienceServiceServer
// for forward compatibility
type ExperienceServiceServer interface {
	CreateExperience(context.Context, *CreateExperienceRequest) (*CreateExperienceResponse, error)
	UpdateExperience(context.Context, *UpdateExperienceRequest) (*Experience, error)
	GetExperience(context.Context, *GetExperienceRequest) (*Experience, error)
	DeleteExperience(context.Context, *DeleteExperienceRequest) (*DeleteExperienceResponse, error)
	mustEmbedUnimplementedExperienceServiceServer()
}

// UnimplementedExperienceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExperienceServiceServer struct {
}

func (UnimplementedExperienceServiceServer) CreateExperience(context.Context, *CreateExperienceRequest) (*CreateExperienceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateExperience not implemented")
}
func (UnimplementedExperienceServiceServer) UpdateExperience(context.Context, *UpdateExperienceRequest) (*Experience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExperience not implemented")
}
func (UnimplementedExperienceServiceServer) GetExperience(context.Context, *GetExperienceRequest) (*Experience, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExperience not implemented")
}
func (UnimplementedExperienceServiceServer) DeleteExperience(context.Context, *DeleteExperienceRequest) (*DeleteExperienceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExperience not implemented")
}
func (UnimplementedExperienceServiceServer) mustEmbedUnimplementedExperienceServiceServer() {}

// UnsafeExperienceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExperienceServiceServer will
// result in compilation errors.
type UnsafeExperienceServiceServer interface {
	mustEmbedUnimplementedExperienceServiceServer()
}

func RegisterExperienceServiceServer(s grpc.ServiceRegistrar, srv ExperienceServiceServer) {
	s.RegisterService(&ExperienceService_ServiceDesc, srv)
}

func _ExperienceService_CreateExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateExperienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperienceServiceServer).CreateExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperienceService_CreateExperience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperienceServiceServer).CreateExperience(ctx, req.(*CreateExperienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperienceService_UpdateExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExperienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperienceServiceServer).UpdateExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperienceService_UpdateExperience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperienceServiceServer).UpdateExperience(ctx, req.(*UpdateExperienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperienceService_GetExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetExperienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperienceServiceServer).GetExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperienceService_GetExperience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperienceServiceServer).GetExperience(ctx, req.(*GetExperienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExperienceService_DeleteExperience_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteExperienceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExperienceServiceServer).DeleteExperience(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ExperienceService_DeleteExperience_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExperienceServiceServer).DeleteExperience(ctx, req.(*DeleteExperienceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExperienceService_ServiceDesc is the grpc.ServiceDesc for ExperienceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExperienceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "resume.ExperienceService",
	HandlerType: (*ExperienceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateExperience",
			Handler:    _ExperienceService_CreateExperience_Handler,
		},
		{
			MethodName: "UpdateExperience",
			Handler:    _ExperienceService_UpdateExperience_Handler,
		},
		{
			MethodName: "GetExperience",
			Handler:    _ExperienceService_GetExperience_Handler,
		},
		{
			MethodName: "DeleteExperience",
			Handler:    _ExperienceService_DeleteExperience_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "resume/resume.proto",
}
