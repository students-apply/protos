// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: internship/internship.proto

package internship

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	InternshipService_CreateInternship_FullMethodName  = "/internship.InternshipService/CreateInternship"
	InternshipService_UploadAttachment_FullMethodName  = "/internship.InternshipService/UploadAttachment"
	InternshipService_DeleteAttachment_FullMethodName  = "/internship.InternshipService/DeleteAttachment"
	InternshipService_GetInternships_FullMethodName    = "/internship.InternshipService/GetInternships"
	InternshipService_GetInternshipByID_FullMethodName = "/internship.InternshipService/GetInternshipByID"
	InternshipService_UpdateInternship_FullMethodName  = "/internship.InternshipService/UpdateInternship"
	InternshipService_DeleteInternship_FullMethodName  = "/internship.InternshipService/DeleteInternship"
)

// InternshipServiceClient is the client API for InternshipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InternshipServiceClient interface {
	CreateInternship(ctx context.Context, in *CreateInternshipRequest, opts ...grpc.CallOption) (*CreateInternshipResponse, error)
	UploadAttachment(ctx context.Context, in *UploadAttachmentRequest, opts ...grpc.CallOption) (*UploadAttachmentResponse, error)
	DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*DeleteAttachmentResponse, error)
	GetInternships(ctx context.Context, in *GetInternshipsRequest, opts ...grpc.CallOption) (*GetInternshipsResponse, error)
	GetInternshipByID(ctx context.Context, in *GetInternshipRequest, opts ...grpc.CallOption) (*Internship, error)
	UpdateInternship(ctx context.Context, in *UpdateInternshipRequest, opts ...grpc.CallOption) (*Internship, error)
	DeleteInternship(ctx context.Context, in *DeleteInternshipRequest, opts ...grpc.CallOption) (*DeleteInternshipResponse, error)
}

type internshipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewInternshipServiceClient(cc grpc.ClientConnInterface) InternshipServiceClient {
	return &internshipServiceClient{cc}
}

func (c *internshipServiceClient) CreateInternship(ctx context.Context, in *CreateInternshipRequest, opts ...grpc.CallOption) (*CreateInternshipResponse, error) {
	out := new(CreateInternshipResponse)
	err := c.cc.Invoke(ctx, InternshipService_CreateInternship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internshipServiceClient) UploadAttachment(ctx context.Context, in *UploadAttachmentRequest, opts ...grpc.CallOption) (*UploadAttachmentResponse, error) {
	out := new(UploadAttachmentResponse)
	err := c.cc.Invoke(ctx, InternshipService_UploadAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internshipServiceClient) DeleteAttachment(ctx context.Context, in *DeleteAttachmentRequest, opts ...grpc.CallOption) (*DeleteAttachmentResponse, error) {
	out := new(DeleteAttachmentResponse)
	err := c.cc.Invoke(ctx, InternshipService_DeleteAttachment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internshipServiceClient) GetInternships(ctx context.Context, in *GetInternshipsRequest, opts ...grpc.CallOption) (*GetInternshipsResponse, error) {
	out := new(GetInternshipsResponse)
	err := c.cc.Invoke(ctx, InternshipService_GetInternships_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internshipServiceClient) GetInternshipByID(ctx context.Context, in *GetInternshipRequest, opts ...grpc.CallOption) (*Internship, error) {
	out := new(Internship)
	err := c.cc.Invoke(ctx, InternshipService_GetInternshipByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internshipServiceClient) UpdateInternship(ctx context.Context, in *UpdateInternshipRequest, opts ...grpc.CallOption) (*Internship, error) {
	out := new(Internship)
	err := c.cc.Invoke(ctx, InternshipService_UpdateInternship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *internshipServiceClient) DeleteInternship(ctx context.Context, in *DeleteInternshipRequest, opts ...grpc.CallOption) (*DeleteInternshipResponse, error) {
	out := new(DeleteInternshipResponse)
	err := c.cc.Invoke(ctx, InternshipService_DeleteInternship_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InternshipServiceServer is the server API for InternshipService service.
// All implementations must embed UnimplementedInternshipServiceServer
// for forward compatibility
type InternshipServiceServer interface {
	CreateInternship(context.Context, *CreateInternshipRequest) (*CreateInternshipResponse, error)
	UploadAttachment(context.Context, *UploadAttachmentRequest) (*UploadAttachmentResponse, error)
	DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*DeleteAttachmentResponse, error)
	GetInternships(context.Context, *GetInternshipsRequest) (*GetInternshipsResponse, error)
	GetInternshipByID(context.Context, *GetInternshipRequest) (*Internship, error)
	UpdateInternship(context.Context, *UpdateInternshipRequest) (*Internship, error)
	DeleteInternship(context.Context, *DeleteInternshipRequest) (*DeleteInternshipResponse, error)
	mustEmbedUnimplementedInternshipServiceServer()
}

// UnimplementedInternshipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedInternshipServiceServer struct {
}

func (UnimplementedInternshipServiceServer) CreateInternship(context.Context, *CreateInternshipRequest) (*CreateInternshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInternship not implemented")
}
func (UnimplementedInternshipServiceServer) UploadAttachment(context.Context, *UploadAttachmentRequest) (*UploadAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAttachment not implemented")
}
func (UnimplementedInternshipServiceServer) DeleteAttachment(context.Context, *DeleteAttachmentRequest) (*DeleteAttachmentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAttachment not implemented")
}
func (UnimplementedInternshipServiceServer) GetInternships(context.Context, *GetInternshipsRequest) (*GetInternshipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternships not implemented")
}
func (UnimplementedInternshipServiceServer) GetInternshipByID(context.Context, *GetInternshipRequest) (*Internship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInternshipByID not implemented")
}
func (UnimplementedInternshipServiceServer) UpdateInternship(context.Context, *UpdateInternshipRequest) (*Internship, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInternship not implemented")
}
func (UnimplementedInternshipServiceServer) DeleteInternship(context.Context, *DeleteInternshipRequest) (*DeleteInternshipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInternship not implemented")
}
func (UnimplementedInternshipServiceServer) mustEmbedUnimplementedInternshipServiceServer() {}

// UnsafeInternshipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InternshipServiceServer will
// result in compilation errors.
type UnsafeInternshipServiceServer interface {
	mustEmbedUnimplementedInternshipServiceServer()
}

func RegisterInternshipServiceServer(s grpc.ServiceRegistrar, srv InternshipServiceServer) {
	s.RegisterService(&InternshipService_ServiceDesc, srv)
}

func _InternshipService_CreateInternship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInternshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).CreateInternship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternshipService_CreateInternship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).CreateInternship(ctx, req.(*CreateInternshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternshipService_UploadAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).UploadAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternshipService_UploadAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).UploadAttachment(ctx, req.(*UploadAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternshipService_DeleteAttachment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAttachmentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).DeleteAttachment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternshipService_DeleteAttachment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).DeleteAttachment(ctx, req.(*DeleteAttachmentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternshipService_GetInternships_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternshipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).GetInternships(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternshipService_GetInternships_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).GetInternships(ctx, req.(*GetInternshipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternshipService_GetInternshipByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInternshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).GetInternshipByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternshipService_GetInternshipByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).GetInternshipByID(ctx, req.(*GetInternshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternshipService_UpdateInternship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInternshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).UpdateInternship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternshipService_UpdateInternship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).UpdateInternship(ctx, req.(*UpdateInternshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InternshipService_DeleteInternship_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInternshipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InternshipServiceServer).DeleteInternship(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: InternshipService_DeleteInternship_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InternshipServiceServer).DeleteInternship(ctx, req.(*DeleteInternshipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// InternshipService_ServiceDesc is the grpc.ServiceDesc for InternshipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var InternshipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "internship.InternshipService",
	HandlerType: (*InternshipServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateInternship",
			Handler:    _InternshipService_CreateInternship_Handler,
		},
		{
			MethodName: "UploadAttachment",
			Handler:    _InternshipService_UploadAttachment_Handler,
		},
		{
			MethodName: "DeleteAttachment",
			Handler:    _InternshipService_DeleteAttachment_Handler,
		},
		{
			MethodName: "GetInternships",
			Handler:    _InternshipService_GetInternships_Handler,
		},
		{
			MethodName: "GetInternshipByID",
			Handler:    _InternshipService_GetInternshipByID_Handler,
		},
		{
			MethodName: "UpdateInternship",
			Handler:    _InternshipService_UpdateInternship_Handler,
		},
		{
			MethodName: "DeleteInternship",
			Handler:    _InternshipService_DeleteInternship_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internship/internship.proto",
}
